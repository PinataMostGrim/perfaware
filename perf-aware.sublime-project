{
    "folders":
    [
        {
            "path": ".",
            "index_exclude_patterns": [".cache/*", ".git/*", "*.exe", "*.obj", "*.ilk", "*.pdb"],
            "binary_file_patterns": [".git/*", "*.exe", "*.ilk", "*.obj", "*.pdb", "*.dll", "*.exp", "*.lib", "*.map"],
        }
    ],
    "build_systems":
    [
        {
            "name": "Build sim8086",
            "windows":
            {
                // file_regex for cl
                "file_regex": "^(..[^(\n]*)\\(([0-9]+)\\) ?:():? (.*)$",
                "shell_cmd": "build-sim8086.bat",
            },
            "linux":
            {
                // file_regex for clang
                // "file_regex": "^(..[^:\\n]*):([0-9]+):?([0-9]+)?:? (.*)$",

                // file_regex for gcc
                "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
                "shell_cmd": "./build-sim8086.sh",
            },
            "working_dir": "${project_path}",
            "env":
            {
                "DEBUG": "0",
            },
            "quiet": false,
            "variants" :
            [
                {
                    "name": "Debug",
                    "env":
                    {
                        "DEBUG": "1",
                    },
                },
            ],
        },
        {
            "name": "Build sim8086_win32",
            "windows":
            {
                // file_regex for cl
                "file_regex": "^(..[^(\n]*)\\(([0-9]+)\\) ?:():? (.*)$",
                "shell_cmd": "build-sim8086-win32.bat",
            },
            "working_dir": "${project_path}",
            "env":
            {
                "DEBUG": "0",
            },
            "quiet": false,
            "variants" :
            [
                {
                    "name": "Debug",
                    "env":
                    {
                        "DEBUG": "1",
                    },
                },
            ],
        },
        {
            "name": "Build sim8086_x11",
            "linux":
            {
                // file_regex for gcc
                "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
                "shell_cmd": "./build-sim8086-x11.sh",
            },
            "working_dir": "${project_path}",
            "env":
            {
                "DEBUG": "0",
            },
            "quiet": false,
            "variants" :
            [
                {
                    "name": "Debug",
                    "env":
                    {
                        "DEBUG": "1",
                    },
                },
            ],
        },
        {
            "name": "Build haversine generator",
            "windows":
            {
                "file_regex": "^(..[^(\n]*)\\(([0-9]+)\\) ?:():? (.*)$",
                "shell_cmd": "build-haversine-gen.bat",
            },
            "linux":
            {
                // file_regex for clang
                // "file_regex": "^(..[^:\\n]*):([0-9]+):?([0-9]+)?:? (.*)$",

                // file_regex for gcc
                "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
                "shell_cmd": "./build-haversine-gen.sh",
            },
            "working_dir": "${project_path}",
            "env":
            {
                "DEBUG": "0",
            },
            "quiet": false,
            "variants" :
            [
                {
                    "name": "Debug",
                    "env":
                    {
                        "DEBUG": "1",
                    },
                },
            ],
        },
        {
            "name": "Build haversine processor",
            "windows":
            {
                "file_regex": "^(..[^(\n]*)\\(([0-9]+)\\) ?:():? (.*)$",
                "shell_cmd": "build-haversine-proc.bat",
            },
            "linux":
            {
                // file_regex for clang
                // "file_regex": "^(..[^:\\n]*):([0-9]+):?([0-9]+)?:? (.*)$",

                // file_regex for gcc
                "file_regex": "^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$",
                "shell_cmd": "./build-haversine-proc.sh",
            },
            "working_dir": "${project_path}",
            "env":
            {
                "DEBUG": "0",
            },
            "quiet": false,
            "variants" :
            [
                {
                    "name": "Debug",
                    "env":
                    {
                        "DEBUG": "1",
                    },
                },
            ],
        },
    ],
    "settings":
    {
        "LSP":
        {
            "clangd":
            {
                "enabled": true,
            },
        },
    },
}
